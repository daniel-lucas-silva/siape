{"version":3,"sources":["App.jsx","Master.jsx","Detail.jsx","serviceWorker.ts","index.tsx"],"names":["routes","path","component","upload","useState","JSON","parse","window","localStorage","getItem","contact","setContact","title","inner","searchContainer","searchIn","type","onChange","event","f","target","files","reader","FileReader","onload","e","data","Uint8Array","result","wb","XLSX","read","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","setItem","stringify","readAsArrayBuffer","ref","style","display","position","slot","color","onClick","click","ios","aurora","md","className","map","c","index","key","reloadDetail","link","routeProps","customer","master","this","props","backLink","Object","entries","value","header","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Framework7","use","Framework7React","ReactDOM","render","theme","document","search","indexOf","split","f7Params","id","popup","closeOnEscape","sheet","popover","actions","params","left","cover","resizable","url","linksView","right","reveal","main","masterDetailBreakpoint","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1ecd5612.chunk.js","sourcesContent":["import React from 'react';\nimport { App, Panel, View } from 'framework7-react';\nimport Master from \"./Master\";\nimport Detail from \"./Detail\";\n\nconst routes = [\n  {\n    path: '/',\n    component: Master,\n    master: true,\n  },\n  {\n    path: '/:id/',\n    component: Detail,\n  },\n];\n\nexport default function (props) {\n  let theme = 'auto';\n  if (document.location.search.indexOf('theme=') >= 0) {\n    theme = document.location.search.split('theme=')[1].split('&')[0];\n  }\n  const f7Params = {\n    id: 'io.framework7.testapp',\n    theme,\n    routes,\n    popup: {\n      closeOnEscape: true,\n    },\n    sheet: {\n      closeOnEscape: true,\n    },\n    popover: {\n      closeOnEscape: true,\n    },\n    actions: {\n      closeOnEscape: true,\n    },\n  };\n\n  // @ts-ignore\n  return <App params={ f7Params }>\n    <Panel left cover resizable>\n      <View url=\"/panel-left/\" linksView=\".view-main\" />\n    </Panel>\n    <Panel right reveal resizable>\n      <View url=\"/panel-right/\"/>\n    </Panel>\n    <View url=\"/\" main className=\"safe-areas\" masterDetailBreakpoint={800} />\n  </App>;\n};\n","import React, {useState} from 'react';\nimport {Page, Navbar, AccordionContent, List, ListItem, Searchbar, Subnavbar, Fab, Icon} from 'framework7-react';\nimport XLSX from 'xlsx';\n\nexport default () => {\n\n  const [contact, setContact] = useState(JSON.parse(window.localStorage.getItem(\"contacts\") || \"[]\"));\n\n  var upload;\n\n  const fileHandler = (event) => {\n    if (event != null) {\n      var files = event.target.files, f = files[0];\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        var data = new Uint8Array(e.target.result);\n        var wb = XLSX.read(data, {type: 'array'});\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const result = XLSX.utils.sheet_to_json(ws);\n\n        window.localStorage.setItem(\"contacts\", JSON.stringify(result));\n\n        setContact(result);\n      };\n      reader.readAsArrayBuffer(f);\n    }\n  };\n\n  return (\n    <Page>\n      <Navbar title=\"Credmil\">\n        <Subnavbar inner={false}>\n          <Searchbar\n            searchContainer=\".search-list\"\n            searchIn=\".item-title\"\n          />\n        </Subnavbar>\n      </Navbar>\n      <input type=\"file\" onChange={fileHandler} ref={(ref) => upload = ref}\n             style={{display: 'none'}}/>\n\n      <Fab position=\"right-bottom\" slot=\"fixed\" color=\"red\" onClick={()=>{upload.click()}}>\n        <Icon ios=\"f7:plus\" aurora=\"f7:plus\" md=\"material:add\" />\n      </Fab>\n\n      <List className=\"searchbar-not-found\">\n        <ListItem title=\"Nothing found\"/>\n      </List>\n      <List className=\"search-list searchbar-found\">\n        {\n          contact.map((c, index) => {\n            return (\n              <ListItem key={index} title={c['Nome']} reloadDetail={true} link={`/${c['CPF']}/`} routeProps={{ customer: c }} />\n            );\n          })\n        }\n      </List>\n    </Page>\n  );\n}\n","import React from 'react';\nimport {Page, Navbar, List, ListItem} from 'framework7-react';\n\nexport default class extends React.Component {\n  render() {\n    return this.props.customer ? (\n      <Page>\n        <Navbar title={`${this.props.customer['Nome']}`} backLink=\"Back\"></Navbar>\n        <List>\n          {\n            Object.entries(this.props.customer).map(([key, value]) => {\n              return (<ListItem header={key}  title={value}/>);\n            })\n          }\n        </List>\n      </Page>\n    ) : <div/>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Framework7 from 'framework7/framework7.esm.bundle';\nimport Framework7React from 'framework7-react';\n\nimport 'framework7/css/framework7.bundle.css';\nimport './css/icons.css';\nimport './css/app.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nFramework7.use(Framework7React);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}